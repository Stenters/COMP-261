[q]Minimum: 40[/q]
[q]Core: 35[/q]
[q]Completion: 10[/q]
[q]Challenge: 20[/q]

Minimum out of 40:
* [5] Has a way of specifying the start and end of a route.
* [5] Has a priority queue of appropriate elements (node, parent, costToHere, totEstCost).
* [5] Uses an appropriate cost measure (sum of segment lengths).
* [10] Uses an appropriate heuristic.
* [5] Prints out the roads on the route. (Duplicates OK.)
* [10] Correctly selects shortest paths.

Core out of 35 (up to 75):
* [15] Get the A* search algorithm results correct.
* [15] Get the 1-to-1 Dijkstra's algorithm results correct.
* [5] Give the correct reason why A* search is better than 1-to-1 Dijkstra's algorithm

Completion out of 10 (up to 85):
* [3] Uses one-way roads correctly in the route-finding.
* [3] Highlights the route on the map as well as printing it.
* [4] Removes duplicate roads from the printout, and give the right lengths and total length. (3 for removing duplicates, 1 for doing the lengths.)

Challenge out of 20 (up to 100, with 5 spare marks):
* [8] Allows user to select distance or time, and find fastest route, using road class and speed limit data, and using an admissible heuristic.
* [2] Explain and justify the cost function and heuristic. Heuristic must be admissible.
* [5] Takes into account restriction information.
* [5] Takes into account intersection constraints such as traffic lights to prefer routes with fewer lights.

Final mark calculation:

[q]Minimum: 40[/q] + [q]Core: 35[/q] + [q]Completion: 10[/q] + [q]Challenge: 20[/q]
